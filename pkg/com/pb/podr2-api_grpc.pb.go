// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: podr2-api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Podr2Api_RequestGenTag_FullMethodName = "/podr2.Podr2Api/request_gen_tag"
	Podr2Api_Echo_FullMethodName          = "/podr2.Podr2Api/Echo"
)

// Podr2ApiClient is the client API for Podr2Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Podr2ApiClient interface {
	RequestGenTag(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RequestGenTag, ResponseGenTag], error)
	// A echo rpc to measure network RTT.
	Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
}

type podr2ApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPodr2ApiClient(cc grpc.ClientConnInterface) Podr2ApiClient {
	return &podr2ApiClient{cc}
}

func (c *podr2ApiClient) RequestGenTag(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RequestGenTag, ResponseGenTag], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Podr2Api_ServiceDesc.Streams[0], Podr2Api_RequestGenTag_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RequestGenTag, ResponseGenTag]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Podr2Api_RequestGenTagClient = grpc.BidiStreamingClient[RequestGenTag, ResponseGenTag]

func (c *podr2ApiClient) Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoMessage)
	err := c.cc.Invoke(ctx, Podr2Api_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Podr2ApiServer is the server API for Podr2Api service.
// All implementations must embed UnimplementedPodr2ApiServer
// for forward compatibility.
type Podr2ApiServer interface {
	RequestGenTag(grpc.BidiStreamingServer[RequestGenTag, ResponseGenTag]) error
	// A echo rpc to measure network RTT.
	Echo(context.Context, *EchoMessage) (*EchoMessage, error)
	mustEmbedUnimplementedPodr2ApiServer()
}

// UnimplementedPodr2ApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPodr2ApiServer struct{}

func (UnimplementedPodr2ApiServer) RequestGenTag(grpc.BidiStreamingServer[RequestGenTag, ResponseGenTag]) error {
	return status.Errorf(codes.Unimplemented, "method RequestGenTag not implemented")
}
func (UnimplementedPodr2ApiServer) Echo(context.Context, *EchoMessage) (*EchoMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedPodr2ApiServer) mustEmbedUnimplementedPodr2ApiServer() {}
func (UnimplementedPodr2ApiServer) testEmbeddedByValue()                  {}

// UnsafePodr2ApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Podr2ApiServer will
// result in compilation errors.
type UnsafePodr2ApiServer interface {
	mustEmbedUnimplementedPodr2ApiServer()
}

func RegisterPodr2ApiServer(s grpc.ServiceRegistrar, srv Podr2ApiServer) {
	// If the following call pancis, it indicates UnimplementedPodr2ApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Podr2Api_ServiceDesc, srv)
}

func _Podr2Api_RequestGenTag_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Podr2ApiServer).RequestGenTag(&grpc.GenericServerStream[RequestGenTag, ResponseGenTag]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Podr2Api_RequestGenTagServer = grpc.BidiStreamingServer[RequestGenTag, ResponseGenTag]

func _Podr2Api_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Podr2ApiServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podr2Api_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Podr2ApiServer).Echo(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Podr2Api_ServiceDesc is the grpc.ServiceDesc for Podr2Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Podr2Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "podr2.Podr2Api",
	HandlerType: (*Podr2ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Podr2Api_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "request_gen_tag",
			Handler:       _Podr2Api_RequestGenTag_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "podr2-api.proto",
}

const (
	Podr2VerifierApi_RequestBatchVerify_FullMethodName        = "/podr2.Podr2VerifierApi/request_batch_verify"
	Podr2VerifierApi_RequestAggregateSignature_FullMethodName = "/podr2.Podr2VerifierApi/request_aggregate_signature"
)

// Podr2VerifierApiClient is the client API for Podr2VerifierApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Podr2VerifierApiClient interface {
	RequestBatchVerify(ctx context.Context, in *RequestBatchVerify, opts ...grpc.CallOption) (*ResponseBatchVerify, error)
	RequestAggregateSignature(ctx context.Context, in *RequestAggregateSignature, opts ...grpc.CallOption) (*ResponseAggregateSignature, error)
}

type podr2VerifierApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPodr2VerifierApiClient(cc grpc.ClientConnInterface) Podr2VerifierApiClient {
	return &podr2VerifierApiClient{cc}
}

func (c *podr2VerifierApiClient) RequestBatchVerify(ctx context.Context, in *RequestBatchVerify, opts ...grpc.CallOption) (*ResponseBatchVerify, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBatchVerify)
	err := c.cc.Invoke(ctx, Podr2VerifierApi_RequestBatchVerify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podr2VerifierApiClient) RequestAggregateSignature(ctx context.Context, in *RequestAggregateSignature, opts ...grpc.CallOption) (*ResponseAggregateSignature, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseAggregateSignature)
	err := c.cc.Invoke(ctx, Podr2VerifierApi_RequestAggregateSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Podr2VerifierApiServer is the server API for Podr2VerifierApi service.
// All implementations must embed UnimplementedPodr2VerifierApiServer
// for forward compatibility.
type Podr2VerifierApiServer interface {
	RequestBatchVerify(context.Context, *RequestBatchVerify) (*ResponseBatchVerify, error)
	RequestAggregateSignature(context.Context, *RequestAggregateSignature) (*ResponseAggregateSignature, error)
	mustEmbedUnimplementedPodr2VerifierApiServer()
}

// UnimplementedPodr2VerifierApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPodr2VerifierApiServer struct{}

func (UnimplementedPodr2VerifierApiServer) RequestBatchVerify(context.Context, *RequestBatchVerify) (*ResponseBatchVerify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBatchVerify not implemented")
}
func (UnimplementedPodr2VerifierApiServer) RequestAggregateSignature(context.Context, *RequestAggregateSignature) (*ResponseAggregateSignature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAggregateSignature not implemented")
}
func (UnimplementedPodr2VerifierApiServer) mustEmbedUnimplementedPodr2VerifierApiServer() {}
func (UnimplementedPodr2VerifierApiServer) testEmbeddedByValue()                          {}

// UnsafePodr2VerifierApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Podr2VerifierApiServer will
// result in compilation errors.
type UnsafePodr2VerifierApiServer interface {
	mustEmbedUnimplementedPodr2VerifierApiServer()
}

func RegisterPodr2VerifierApiServer(s grpc.ServiceRegistrar, srv Podr2VerifierApiServer) {
	// If the following call pancis, it indicates UnimplementedPodr2VerifierApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Podr2VerifierApi_ServiceDesc, srv)
}

func _Podr2VerifierApi_RequestBatchVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBatchVerify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Podr2VerifierApiServer).RequestBatchVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podr2VerifierApi_RequestBatchVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Podr2VerifierApiServer).RequestBatchVerify(ctx, req.(*RequestBatchVerify))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podr2VerifierApi_RequestAggregateSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAggregateSignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Podr2VerifierApiServer).RequestAggregateSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podr2VerifierApi_RequestAggregateSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Podr2VerifierApiServer).RequestAggregateSignature(ctx, req.(*RequestAggregateSignature))
	}
	return interceptor(ctx, in, info, handler)
}

// Podr2VerifierApi_ServiceDesc is the grpc.ServiceDesc for Podr2VerifierApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Podr2VerifierApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "podr2.Podr2VerifierApi",
	HandlerType: (*Podr2VerifierApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "request_batch_verify",
			Handler:    _Podr2VerifierApi_RequestBatchVerify_Handler,
		},
		{
			MethodName: "request_aggregate_signature",
			Handler:    _Podr2VerifierApi_RequestAggregateSignature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "podr2-api.proto",
}
